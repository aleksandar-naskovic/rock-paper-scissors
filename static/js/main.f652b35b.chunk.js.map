{"version":3,"sources":["images/icon-rock.svg","images/icon-paper.svg","images/icon-scissors.svg","images sync /^/icon/-.*/.svg$","images/logo.svg","images/icon-close.svg","images/icon-lizard.svg","images/icon-spock.svg","components/Game.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Game","handleClick","className","type","src","rockImg","onClick","name","paperImg","scissorsImg","Result","playerChoice","houseChoice","setShowResult","playerImage","houseImage","setInfo","info","useEffect","timer","setTimeout","clearTimeout","class","onclick","App","useState","setPlayerChoice","setHouseChoice","counter","setCounter","showResult","Logo","alt","target","game","Math","floor","random","length","require","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f652b35b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-rock.8ce1e109.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-paper.69a8c2e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-scissors.bec2f9b3.svg\";","var map = {\n\t\"./icon-close.svg\": 16,\n\t\"./icon-lizard.svg\": 17,\n\t\"./icon-paper.svg\": 3,\n\t\"./icon-rock.svg\": 2,\n\t\"./icon-scissors.svg\": 4,\n\t\"./icon-spock.svg\": 18\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6;","module.exports = __webpack_public_path__ + \"static/media/logo.759a2075.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-close.919ab92a.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-lizard.7d2e0b18.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-spock.b6446e8e.svg\";","import React from 'react'\r\nimport rockImg from './../images/icon-rock.svg'\r\nimport paperImg from './../images/icon-paper.svg'\r\nimport scissorsImg from './../images/icon-scissors.svg'\r\n\r\nfunction Game({handleClick}) {\r\n  return (\r\n    \r\n    <div>\r\n        <input  className=\"rock\" type=\"image\" src={rockImg} onClick={handleClick} name=\"rock\"/>\r\n        <input  className=\"paper\" type=\"image\" src={paperImg} onClick={handleClick} name=\"paper\"/>\r\n        <input  className=\"scissors\" type=\"image\" src={scissorsImg} onClick={handleClick} name=\"scissors\"/>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Game","import React, {useEffect} from 'react'\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Result({playerChoice, houseChoice, setShowResult, playerImage, houseImage, setInfo, info}) {\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setShowResult(true)\r\n      setInfo()\r\n    }, 5000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div class=\"winner\">\r\n        <div className=\"player-winner\">\r\n          <h3>You picked</h3>\r\n          <input  className={playerChoice} type=\"image\" src={playerImage} onclick=\"return false;\" />\r\n        </div>\r\n        <div class=\"house-winner\">\r\n          <h3>House picked</h3>\r\n          <input  className={houseChoice} type=\"image\" src={houseImage} onclick=\"return false;\" />\r\n        </div>\r\n      </div>\r\n      <p class=\"final-result\">{info}</p>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Result","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Game from './components/Game'\nimport Result from './components/Result'\nimport Logo from './images/logo.svg'\n\n\n\nfunction App() {\n  const [playerChoice, setPlayerChoice] = useState(\"\")\n  const [houseChoice, setHouseChoice] = useState(\"\")\n  const [counter, setCounter] = useState(0)\n  const [showResult, setShowResult] = useState(true)\n  const [info, setInfo] = useState()\n\n  const handleClick = (e) => {\n    let playerChoice = e.target.name\n    const game = [\"rock\", \"paper\", \"scissors\"]\n    let houseChoice = game[Math.floor(Math.random() * game.length)]\n\n    //check for a tie\n    if (playerChoice === houseChoice) {\n      setInfo(\"It's a tie\")\n    }\n    else\n    {\n      // check for rock\n      if(playerChoice === \"rock\") {\n        if(houseChoice === \"scissors\"){\n          setCounter(counter + 1)\n          setInfo(\"You win\")\n        }\n        else {\n          setCounter(counter - 1)\n          setInfo(\"You lose\")\n        }\n      }\n\n      // check for scissors\n      if(playerChoice === \"scissors\") {\n        if(houseChoice === \"paper\"){\n          setCounter(counter + 1)\n          setInfo(\"You win\")\n        }\n        else {\n          setCounter(counter - 1)\n          setInfo(\"You lose\")\n        }\n      }\n\n      // check for rock\n      if(playerChoice === \"paper\") {\n        if(houseChoice === \"rock\"){\n          setCounter(counter + 1)\n          setInfo(\"You win\")\n        }\n        else {\n          setCounter(counter - 1)\n          setInfo(\"You lose\")\n        }\n      }\n    }\n    setShowResult(false)\n    setPlayerChoice(playerChoice)\n    setHouseChoice(houseChoice)\n  }\n    \n  return (\n    <div className=\"App\">\n      <div className=\"top-bar\">\n        <div className=\"logo\"><img src={Logo} alt=\"\"/></div>\n        <div className=\"result\">\n          <p className=\"score\">Score</p>\n          <h3 className=\"score-counter\">{counter}</h3>\n        </div>\n        \n      </div>\n      <div className=\"choice\">\n      {showResult ? \n      <Game handleClick={handleClick}/>\n       : \n       <Result \n        houseChoice={houseChoice} \n        playerChoice={playerChoice} \n        setShowResult={setShowResult}\n        playerImage={require(`./images/icon-${playerChoice}.svg`)}\n        houseImage={require(`./images/icon-${houseChoice}.svg`)}\n        setInfo={setInfo}\n        info={info}\n      />\n      }\n      </div>\n      \n      \n      \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}